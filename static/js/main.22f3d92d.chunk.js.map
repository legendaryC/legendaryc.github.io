{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QUERY_USERS","gql","QUERY_BLOCKS","UserInfo","useQuery","data","loading","Fragment","articles","map","article","class","data-animated","id","src","img","alt","to","Date","time","toDateString","toLocaleTimeString","title","href","intro","Detail","articleId","useParams","variables","error","blocks","block","status","style","marginLeft","content","align","Block","tag","client","ApolloClient","link","createHttpLink","uri","headers","fetchOptions","method","cache","InMemoryCache","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.22f3d92d.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { gql, from } from \"apollo-boost\";\nimport { Query, ApolloProvider, useQuery, useLazyQuery } from \"react-apollo\";\nimport { ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useRouteMatch, useParams, HashRouter, NavLink, useLocation } from \"react-router-dom\";\n//import UserInfo from \"./UserInfo.jsx\"\n\nconst QUERY_USERS = gql`\n  {\n    articles {\n      id\n      time\n      title\n      intro\n      img\n      blocks {\n        content\n      }\n    }\n  }\n`;\nconst QUERY_BLOCKS = gql`\n  query ($articleId: Int!) {\n    article(id: $articleId) {\n      time\n      title\n      img\n      blocks {\n        tag\n        content\n      }\n    }\n  }\n`;\nexport function Block(block, status) {\n  switch (status) {\n    case \"li\":\n      return <li style={{ marginLeft: 30 }}>{block.content}</li>;\n    case \"h3\":\n      return <h3>{block.content}</h3>;\n    case \"p\":\n      return <p class=\"margbot50\">{block.content}</p>;\n    case \"img\":\n      return (\n        <div class=\"single_blog_post_img\">\n          <img src={block.content} alt=\"\" />\n        </div>\n      );\n    case \"project\":\n      return (\n        <h4 align=\"center\" class=\"margbot50\">\n          deployed on Github Pages:{\" \"}\n          <a href={\"\" + block.content}>\n            <i class=\"fas fa-door-open fa-1x\"></i>\n          </a>\n        </h4>\n      );\n    default:\n      return <h1>Error</h1>;\n  }\n}\n\nexport function UserInfo() {\n  const { data, loading } = useQuery(QUERY_USERS);\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n  return (\n    <React.Fragment>\n      {data.articles.map((article) => (\n        <div class=\"blog_post margbot50 clearfix card\" data-animated=\"fadeInUp\">\n          <div id=\"blog1\" class=\"blog_post_img \">\n            <img id=\"img2\" src={article.img} alt=\"\" />\n            <NavLink class=\"zoom\" to={\"/detail/\" + article.id}></NavLink>\n          </div>\n          <div class=\"blog_post_descr\">\n            <div class=\"blog_post_date\">{new Date(article.time).toDateString() + \" | \" + new Date(article.time).toLocaleTimeString()}</div>\n            <NavLink class=\"blog_post_title\" to={\"/detail/\" + article.id}>\n              {article.title}\n            </NavLink>\n            <ul class=\"blog_post_info\">\n              <li>\n                <a href=\"javascript:void(0);\">Admin</a>\n              </li>\n              <li>\n                <a href=\"javascript:void(0);\">Creative</a>\n              </li>\n              <li>\n                <a href=\"javascript:void(0);\">0 Comments</a>\n              </li>\n            </ul>\n            <hr />\n            <div class=\"blog_post_content\">{article.intro + \" ... \"}</div>\n            <NavLink class=\"read_more_btn\" to={\"/detail/\" + article.id}>\n              Read More\n            </NavLink>\n          </div>\n        </div>\n      ))}\n      <ul id=\"sahidu\" class=\"pagination clearfix\">\n        <li class=\"active\">\n          <a href=\"javascript:void(0);\">1</a>\n        </li>\n      </ul>\n    </React.Fragment>\n  );\n}\n\nexport function Detail() {\n  let { articleId } = useParams();\n  const { data, loading, error } = useQuery(QUERY_BLOCKS, {\n    variables: { articleId },\n  });\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  return (\n    <div class=\"single_blog_post clearfix\" data-animated=\"fadeInUp\">\n      <div class=\"single_blog_post_descr\">\n        <div class=\"single_blog_post_date\">{new Date(data.article.time).toDateString() + \" | \" + new Date(data.article.time).toLocaleTimeString()}</div>\n        <div class=\"single_blog_post_title\">{data.article.title}</div>\n        <ul class=\"single_blog_post_info\">\n          <li>\n            <a href=\"javascript:void(0);\">Admin</a>\n          </li>\n          <li>\n            <a href=\"javascript:void(0);\">Creative</a>\n          </li>\n          <li>\n            <a href=\"javascript:void(0);\">0 Comments</a>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"single_blog_post_img\">\n        <img src={data.article.img} alt=\"\" />\n      </div>\n\n      <div class=\"single_blog_post_content\">{data.article.blocks.map((block) => Block(block, block.tag))}</div>\n    </div>\n  );\n}\n\n/*\nconst client = new ApolloClient({\n    uri: 'http://54.197.2.14/graphql/',\n});*/\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n    uri: \"https://jian763.com/graphql/\",\n    headers: { \"Content-Type\": \"application/graphql\" },\n    fetchOptions: { method: \"GET\" },\n  }),\n  cache: new InMemoryCache(),\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <HashRouter>\n      <Switch>\n        <Route path=\"/detail/:articleId\" component={Detail} />\n        <Route path=\"/\" component={UserInfo} />\n        <Redirect to=\"\" />\n      </Switch>\n    </HashRouter>\n  </ApolloProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('blogList'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}